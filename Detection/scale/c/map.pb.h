// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef PROTOBUF_map_2eproto__INCLUDED
#define PROTOBUF_map_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Detection {
class Cell;
class CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
class FlowKeyValue;
class FlowKeyValueDefaultTypeInternal;
extern FlowKeyValueDefaultTypeInternal _FlowKeyValue_default_instance_;
class FlowStats;
class FlowStatsDefaultTypeInternal;
extern FlowStatsDefaultTypeInternal _FlowStats_default_instance_;
class IpRange;
class IpRangeDefaultTypeInternal;
extern IpRangeDefaultTypeInternal _IpRange_default_instance_;
}  // namespace Detection

namespace Detection {

namespace protobuf_map_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_map_2eproto

// ===================================================================

class FlowStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Detection.FlowStats) */ {
 public:
  FlowStats();
  virtual ~FlowStats();

  FlowStats(const FlowStats& from);

  inline FlowStats& operator=(const FlowStats& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowStats& default_instance();

  static inline const FlowStats* internal_default_instance() {
    return reinterpret_cast<const FlowStats*>(
               &_FlowStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FlowStats* other);

  // implements Message ----------------------------------------------

  inline FlowStats* New() const PROTOBUF_FINAL { return New(NULL); }

  FlowStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlowStats& from);
  void MergeFrom(const FlowStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlowStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Detection.FlowKeyValue entries = 1;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 1;
  const ::Detection::FlowKeyValue& entries(int index) const;
  ::Detection::FlowKeyValue* mutable_entries(int index);
  ::Detection::FlowKeyValue* add_entries();
  ::google::protobuf::RepeatedPtrField< ::Detection::FlowKeyValue >*
      mutable_entries();
  const ::google::protobuf::RepeatedPtrField< ::Detection::FlowKeyValue >&
      entries() const;

  // @@protoc_insertion_point(class_scope:Detection.FlowStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Detection::FlowKeyValue > entries_;
  mutable int _cached_size_;
  friend struct protobuf_map_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlowKeyValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Detection.FlowKeyValue) */ {
 public:
  FlowKeyValue();
  virtual ~FlowKeyValue();

  FlowKeyValue(const FlowKeyValue& from);

  inline FlowKeyValue& operator=(const FlowKeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlowKeyValue& default_instance();

  static inline const FlowKeyValue* internal_default_instance() {
    return reinterpret_cast<const FlowKeyValue*>(
               &_FlowKeyValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FlowKeyValue* other);

  // implements Message ----------------------------------------------

  inline FlowKeyValue* New() const PROTOBUF_FINAL { return New(NULL); }

  FlowKeyValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FlowKeyValue& from);
  void MergeFrom(const FlowKeyValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FlowKeyValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Detection.IpRange key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::Detection::IpRange& key() const;
  ::Detection::IpRange* mutable_key();
  ::Detection::IpRange* release_key();
  void set_allocated_key(::Detection::IpRange* key);

  // .Detection.Cell value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::Detection::Cell& value() const;
  ::Detection::Cell* mutable_value();
  ::Detection::Cell* release_value();
  void set_allocated_value(::Detection::Cell* value);

  // @@protoc_insertion_point(class_scope:Detection.FlowKeyValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Detection::IpRange* key_;
  ::Detection::Cell* value_;
  mutable int _cached_size_;
  friend struct protobuf_map_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IpRange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Detection.IpRange) */ {
 public:
  IpRange();
  virtual ~IpRange();

  IpRange(const IpRange& from);

  inline IpRange& operator=(const IpRange& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IpRange& default_instance();

  static inline const IpRange* internal_default_instance() {
    return reinterpret_cast<const IpRange*>(
               &_IpRange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(IpRange* other);

  // implements Message ----------------------------------------------

  inline IpRange* New() const PROTOBUF_FINAL { return New(NULL); }

  IpRange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IpRange& from);
  void MergeFrom(const IpRange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IpRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 min = 1;
  void clear_min();
  static const int kMinFieldNumber = 1;
  ::google::protobuf::uint32 min() const;
  void set_min(::google::protobuf::uint32 value);

  // uint32 max = 2;
  void clear_max();
  static const int kMaxFieldNumber = 2;
  ::google::protobuf::uint32 max() const;
  void set_max(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Detection.IpRange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 min_;
  ::google::protobuf::uint32 max_;
  mutable int _cached_size_;
  friend struct protobuf_map_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Cell : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Detection.Cell) */ {
 public:
  Cell();
  virtual ~Cell();

  Cell(const Cell& from);

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Cell& default_instance();

  static inline const Cell* internal_default_instance() {
    return reinterpret_cast<const Cell*>(
               &_Cell_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Cell* other);

  // implements Message ----------------------------------------------

  inline Cell* New() const PROTOBUF_FINAL { return New(NULL); }

  Cell* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cell& from);
  void MergeFrom(const Cell& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string output = 1;
  int output_size() const;
  void clear_output();
  static const int kOutputFieldNumber = 1;
  const ::std::string& output(int index) const;
  ::std::string* mutable_output(int index);
  void set_output(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_output(int index, ::std::string&& value);
  #endif
  void set_output(int index, const char* value);
  void set_output(int index, const char* value, size_t size);
  ::std::string* add_output();
  void add_output(const ::std::string& value);
  #if LANG_CXX11
  void add_output(::std::string&& value);
  #endif
  void add_output(const char* value);
  void add_output(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& output() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_output();

  // repeated double data = 4 [packed = true];
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::google::protobuf::RepeatedField< double >&
      data() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_data();

  // int32 rows = 2;
  void clear_rows();
  static const int kRowsFieldNumber = 2;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // int32 cols = 3;
  void clear_cols();
  static const int kColsFieldNumber = 3;
  ::google::protobuf::int32 cols() const;
  void set_cols(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Detection.Cell)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> output_;
  ::google::protobuf::RepeatedField< double > data_;
  mutable int _data_cached_byte_size_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  mutable int _cached_size_;
  friend struct protobuf_map_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FlowStats

// repeated .Detection.FlowKeyValue entries = 1;
inline int FlowStats::entries_size() const {
  return entries_.size();
}
inline void FlowStats::clear_entries() {
  entries_.Clear();
}
inline const ::Detection::FlowKeyValue& FlowStats::entries(int index) const {
  // @@protoc_insertion_point(field_get:Detection.FlowStats.entries)
  return entries_.Get(index);
}
inline ::Detection::FlowKeyValue* FlowStats::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:Detection.FlowStats.entries)
  return entries_.Mutable(index);
}
inline ::Detection::FlowKeyValue* FlowStats::add_entries() {
  // @@protoc_insertion_point(field_add:Detection.FlowStats.entries)
  return entries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Detection::FlowKeyValue >*
FlowStats::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:Detection.FlowStats.entries)
  return &entries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Detection::FlowKeyValue >&
FlowStats::entries() const {
  // @@protoc_insertion_point(field_list:Detection.FlowStats.entries)
  return entries_;
}

// -------------------------------------------------------------------

// FlowKeyValue

// .Detection.IpRange key = 1;
inline bool FlowKeyValue::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void FlowKeyValue::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::Detection::IpRange& FlowKeyValue::key() const {
  // @@protoc_insertion_point(field_get:Detection.FlowKeyValue.key)
  return key_ != NULL ? *key_
                         : *::Detection::IpRange::internal_default_instance();
}
inline ::Detection::IpRange* FlowKeyValue::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::Detection::IpRange;
  }
  // @@protoc_insertion_point(field_mutable:Detection.FlowKeyValue.key)
  return key_;
}
inline ::Detection::IpRange* FlowKeyValue::release_key() {
  // @@protoc_insertion_point(field_release:Detection.FlowKeyValue.key)
  
  ::Detection::IpRange* temp = key_;
  key_ = NULL;
  return temp;
}
inline void FlowKeyValue::set_allocated_key(::Detection::IpRange* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Detection.FlowKeyValue.key)
}

// .Detection.Cell value = 2;
inline bool FlowKeyValue::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void FlowKeyValue::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::Detection::Cell& FlowKeyValue::value() const {
  // @@protoc_insertion_point(field_get:Detection.FlowKeyValue.value)
  return value_ != NULL ? *value_
                         : *::Detection::Cell::internal_default_instance();
}
inline ::Detection::Cell* FlowKeyValue::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::Detection::Cell;
  }
  // @@protoc_insertion_point(field_mutable:Detection.FlowKeyValue.value)
  return value_;
}
inline ::Detection::Cell* FlowKeyValue::release_value() {
  // @@protoc_insertion_point(field_release:Detection.FlowKeyValue.value)
  
  ::Detection::Cell* temp = value_;
  value_ = NULL;
  return temp;
}
inline void FlowKeyValue::set_allocated_value(::Detection::Cell* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Detection.FlowKeyValue.value)
}

// -------------------------------------------------------------------

// IpRange

// uint32 min = 1;
inline void IpRange::clear_min() {
  min_ = 0u;
}
inline ::google::protobuf::uint32 IpRange::min() const {
  // @@protoc_insertion_point(field_get:Detection.IpRange.min)
  return min_;
}
inline void IpRange::set_min(::google::protobuf::uint32 value) {
  
  min_ = value;
  // @@protoc_insertion_point(field_set:Detection.IpRange.min)
}

// uint32 max = 2;
inline void IpRange::clear_max() {
  max_ = 0u;
}
inline ::google::protobuf::uint32 IpRange::max() const {
  // @@protoc_insertion_point(field_get:Detection.IpRange.max)
  return max_;
}
inline void IpRange::set_max(::google::protobuf::uint32 value) {
  
  max_ = value;
  // @@protoc_insertion_point(field_set:Detection.IpRange.max)
}

// -------------------------------------------------------------------

// Cell

// int32 rows = 2;
inline void Cell::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 Cell::rows() const {
  // @@protoc_insertion_point(field_get:Detection.Cell.rows)
  return rows_;
}
inline void Cell::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:Detection.Cell.rows)
}

// int32 cols = 3;
inline void Cell::clear_cols() {
  cols_ = 0;
}
inline ::google::protobuf::int32 Cell::cols() const {
  // @@protoc_insertion_point(field_get:Detection.Cell.cols)
  return cols_;
}
inline void Cell::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:Detection.Cell.cols)
}

// repeated double data = 4 [packed = true];
inline int Cell::data_size() const {
  return data_.size();
}
inline void Cell::clear_data() {
  data_.Clear();
}
inline double Cell::data(int index) const {
  // @@protoc_insertion_point(field_get:Detection.Cell.data)
  return data_.Get(index);
}
inline void Cell::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:Detection.Cell.data)
}
inline void Cell::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:Detection.Cell.data)
}
inline const ::google::protobuf::RepeatedField< double >&
Cell::data() const {
  // @@protoc_insertion_point(field_list:Detection.Cell.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< double >*
Cell::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Detection.Cell.data)
  return &data_;
}

// repeated string output = 1;
inline int Cell::output_size() const {
  return output_.size();
}
inline void Cell::clear_output() {
  output_.Clear();
}
inline const ::std::string& Cell::output(int index) const {
  // @@protoc_insertion_point(field_get:Detection.Cell.output)
  return output_.Get(index);
}
inline ::std::string* Cell::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:Detection.Cell.output)
  return output_.Mutable(index);
}
inline void Cell::set_output(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Detection.Cell.output)
  output_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Cell::set_output(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Detection.Cell.output)
  output_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Cell::set_output(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Detection.Cell.output)
}
inline void Cell::set_output(int index, const char* value, size_t size) {
  output_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Detection.Cell.output)
}
inline ::std::string* Cell::add_output() {
  // @@protoc_insertion_point(field_add_mutable:Detection.Cell.output)
  return output_.Add();
}
inline void Cell::add_output(const ::std::string& value) {
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Detection.Cell.output)
}
#if LANG_CXX11
inline void Cell::add_output(::std::string&& value) {
  output_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Detection.Cell.output)
}
#endif
inline void Cell::add_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  output_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Detection.Cell.output)
}
inline void Cell::add_output(const char* value, size_t size) {
  output_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Detection.Cell.output)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Cell::output() const {
  // @@protoc_insertion_point(field_list:Detection.Cell.output)
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Cell::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:Detection.Cell.output)
  return &output_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Detection

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_2eproto__INCLUDED
